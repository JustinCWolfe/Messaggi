package com.messaggi.persistence.domain;

// Generated Oct 15, 2013 8:04:55 AM by Hibernate Tools 4.0.0

import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.Table;

/**
 * Application generated by hbm2java
 */
@Entity
@Table(name = "application", schema = "public")
public class Application implements java.io.Serializable
{

    private long id;

    private boolean active;

    private Set<ApplicationPlatform> applicationPlatforms = new HashSet<ApplicationPlatform>(0);

    private UserApplication userApplication;

    public Application()
    {
    }

    public Application(long id, boolean active)
    {
        this.id = id;
        this.active = active;
    }

    public Application(long id, boolean active, Set<ApplicationPlatform> applicationPlatforms,
            UserApplication userApplication)
    {
        this.id = id;
        this.active = active;
        this.applicationPlatforms = applicationPlatforms;
        this.userApplication = userApplication;
    }

    @Id
    @Column(name = "id", unique = true, nullable = false)
    public long getId()
    {
        return this.id;
    }

    public void setId(long id)
    {
        this.id = id;
    }

    @Column(name = "active", nullable = false)
    public boolean isActive()
    {
        return this.active;
    }

    public void setActive(boolean active)
    {
        this.active = active;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "application")
    public Set<ApplicationPlatform> getApplicationPlatforms()
    {
        return this.applicationPlatforms;
    }

    public void setApplicationPlatforms(Set<ApplicationPlatform> applicationPlatforms)
    {
        this.applicationPlatforms = applicationPlatforms;
    }

    @OneToOne(fetch = FetchType.LAZY, mappedBy = "application")
    public UserApplication getUserApplication()
    {
        return this.userApplication;
    }

    public void setUserApplication(UserApplication userApplication)
    {
        this.userApplication = userApplication;
    }

}
